{
	"info": {
		"_postman_id": "dd85c1c0-1268-4509-b623-0c701a7758a5",
		"name": "httpbin.org",
		"description": "Makes four requests to HTTPBin (httpbin.org) and tests Newman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET with URL Params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate HTTP status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"////////////////////////////////////////////////////////////////////////////////",
							"",
							"pm.test(\"Validate response not null\", function () {",
							"    pm.response.to.be.not.eql(null);",
							"});",
							"",
							"////////////////////////////////////////////////////////////////////////////////",
							"",
							"var jsonResponse = JSON.parse(responseBody);",
							"",
							"pm.test(\"Validate expected response (without 'Postman-Token' and 'X-Amzn-Trace-Id')\", function () {",
							"    delete jsonResponse.headers['Postman-Token'];",
							"    delete jsonResponse.headers['X-Amzn-Trace-Id'];",
							"    pm.expect(pm.globals.get(\"expected\")).to.eql(jsonResponse);",
							"    console.log(jsonResponse);",
							"    console.log(pm.globals.get(\"expected\"));",
							"});",
							"",
							"////////////////////////////////////////////////////////////////////////////////",
							"",
							"pm.test(\"Validate that 'Postman-Token' and 'X-Amzn-Trace-Id' must be not empyt)\", function () {",
							"    pm.expect(jsonResponse.headers['Postman-Token']).to.be.not.eql(null);",
							"    pm.expect(jsonResponse.headers['X-Amzn-Trace-Id']).to.be.not.eql(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var responseExpected = ",
							"{",
							"    \"args\": {},",
							"    \"headers\": {",
							"        \"Accept\": \"*/*\",",
							"        \"Accept-Encoding\": \"gzip, deflate, br\",",
							"        \"Cache-Control\": \"no-cache\",",
							"        \"Host\": \"httpbin.org\",",
							"        \"User-Agent\": \"PostmanRuntime/7.26.8\",",
							"    },",
							"    \"origin\": \"200.9.160.101\",",
							"    \"url\": \"http://httpbin.org/get\"",
							"}",
							"",
							"",
							"pm.globals.set(\"expected\", responseExpected);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL_GET}}",
					"host": [
						"{{BASE_URL_GET}}"
					]
				},
				"description": "Simple GET request with URL Parameters"
			},
			"response": []
		},
		{
			"name": "POST with JSON body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check POST param in response\", function () {",
							"    let data = pm.response.json();",
							"    pm.expect(data.json.something).to.eql(\"cool\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"something\": \"cool\"\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/post",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{BASE_URL}}/delete",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"delete"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT with form data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test form data\", function () {",
							"    let data = pm.response.json();",
							"    pm.expect(data.form.examplePUT).to.eql(\"123456\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "examplePUT",
							"value": "123456",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BASE_URL}}/put",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"put"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}